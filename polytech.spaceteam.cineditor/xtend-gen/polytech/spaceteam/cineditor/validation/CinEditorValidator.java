/**
 * generated by Xtext 2.14.0
 */
package polytech.spaceteam.cineditor.validation;

import CinEditorML.CinEditorMLPackage;
import CinEditorML.Element;
import CinEditorML.Movie;
import CinEditorML.Shape;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.eclipse.xtext.validation.Check;
import polytech.spaceteam.cineditor.validation.AbstractCinEditorValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class CinEditorValidator extends AbstractCinEditorValidator {
  public final static String INVALID_POSITION = "invalidPosition";
  
  public final static String INVALID_COLOR = "invalidColor";
  
  public final static String INVALID_DURATION = "invalidDuration";
  
  @Check
  public void checkMoviePosition(final Movie movie) {
    int _width = movie.getPosition().getWidth();
    boolean _lessThan = (_width < 0);
    if (_lessThan) {
      this.error("Movie width must be > 0", 
        CinEditorMLPackage.Literals.MOVIE__POSITION, 
        CinEditorValidator.INVALID_POSITION);
    }
    int _height = movie.getPosition().getHeight();
    boolean _lessThan_1 = (_height < 0);
    if (_lessThan_1) {
      this.error("Movie height must be > 0", 
        CinEditorMLPackage.Literals.MOVIE__POSITION, 
        CinEditorValidator.INVALID_POSITION);
    }
    int _x = movie.getPosition().getX();
    boolean _notEquals = (_x != 0);
    if (_notEquals) {
      this.error("Movie x must be 0", 
        CinEditorMLPackage.Literals.MOVIE__POSITION, 
        CinEditorValidator.INVALID_POSITION);
    }
    int _y = movie.getPosition().getY();
    boolean _notEquals_1 = (_y != 0);
    if (_notEquals_1) {
      this.error("Movie y must be 0", 
        CinEditorMLPackage.Literals.MOVIE__POSITION, 
        CinEditorValidator.INVALID_POSITION);
    }
  }
  
  @Check
  public void checkElementDuration(final Element element) {
    int _duration = element.getDuration();
    boolean _lessThan = (_duration < 0);
    if (_lessThan) {
      this.error("Element duration must be > 0", 
        CinEditorMLPackage.Literals.ELEMENT__DURATION, 
        CinEditorValidator.INVALID_DURATION);
    }
  }
  
  @Check
  public void checkShapeColor(final Shape shape) {
    final Pattern p = Pattern.compile("^([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$");
    final Matcher m = p.matcher(shape.getHexadecimalValue());
    boolean b = m.matches();
    if ((!b)) {
      this.error("Shape color must be in hexadecimal", 
        CinEditorMLPackage.Literals.SHAPE__HEXADECIMAL_VALUE, 
        CinEditorValidator.INVALID_COLOR);
    }
  }
}

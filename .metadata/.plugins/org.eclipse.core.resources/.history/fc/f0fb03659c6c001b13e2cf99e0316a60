/*
 * generated by Xtext 2.14.0
 */
package polytech.spaceteam.cineditor.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.util.ArrayList
import javax.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.naming.QualifiedName
import CinEditorML.Movie

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class CinEditorGenerator extends AbstractGenerator {

	val varMovieHeight = "movie_height";
	val varMovieWidth = "movie_width";
	val elementsVarNames = new ArrayList();
	
	@Inject extension IQualifiedNameProvider
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (movie : resource.allContents.toIterable.filter(Movie)) {
			val _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(movie);
			fsa.generateFile(
            	_fullyQualifiedName + ".py",
            	compile(movie))
		}
	
	}
	
	private def String compile(Movie movie) {
		var movieString = loadImports();
		movieString += extractMovieSize(movie);
		movieString += extractLayers(movie.getLayers());
		movieString += extractFinalCut(movie);
		return movieString;
	}
	
	private def String extractFinalCut(Movie movie) {
		var sFinal = "\nvideo = CompositeVideoClip([";
		for (val i = 0; i < elementsVarNames.size(); i++) {
			if (i != 0) {
				sFinal += ", ";
			}
			sFinal += elementsVarNames.get(i);
		}
		sFinal += "], size=(" + varMovieWidth + "," + varMovieHeight + ")).set_duration(15)\n"; //TODO when no video set a calculated duration
		sFinal += "video.write_videofile('./" + movie.getName()  + ".avi', codec='mpeg4', fps=" + movie.getFps() +")";
		return sFinal;
	}
	
	private def String extractLayers(List<Layer> layers) {
		String s = "";
		for (Layer layer : layers) {
			s += extractElementsFromLayer(layer.getElements());
		}
		return s;
	}
	
	private String extractElementInLayer(Element element) {
		String s = "";
		if (element instanceof Text)
			s += extractElement((Text) element);
		else if (element instanceof Picture)
			s += extractElement((Picture) element);
		else if (element instanceof Video)
			s += extractElement((Video) element);
		else if (element instanceof Effect)
			s += extractElement((Effect) element);
		return s;
	}
	
	private String extractBeginTimeFromElement(Element element) {
		String s = "";
		if (element.getBeginTime() > 0) {
			s += "\\\n\t.set_start(" + element.getBeginTime() + ")";
		}
		return s;
	}
	
	private String extractDurationFromElement(Element element) {
		String s = "";
		if (element.getDuration() > 0) {
			s += "\\\n\t.set_duration(" + element.getDuration() + ")";
		}
		return s;
	}
	
	private String extractPositionFromElement(GraphicalElement element) {
		String s = "";
		int marginRight = 0;
		int marginBottom = 0;
		String posX = element.getPosition().getX() + "";
		String posY = element.getPosition().getY() + "";
		if (element.getPosition().getX() < 0) {
			marginRight = -element.getPosition().getX();
			posX = "'right'";
		}
		if (element.getPosition().getY() < 0) {
			marginBottom = -element.getPosition().getY();
			posY = "'bottom'";
		}
		if (!posX.equals("0") && !posY.equals("0")) {
			s += "\\\n\t.set_pos((" + posX + ", " + posY + "))";
		}
		if (marginRight != 0 || marginBottom != 0) {
			s += "\\\n\t.margin(bottom=" + marginBottom + ", right=" + marginRight + ")";
		}
		return s;
	}
	
	
	private String extractElement(Text element) {		
		String s = element.getName() 
				+ " = TextClip("
					+ "\"" +element.getText() + "\""
					+ ", color='#" + element.getColor().getHexadecimalValue() + "'"
					+ ", fontsize=" + element.getFontSize()
				+ ")"
				+ extractBeginTimeFromElement(element)
				+ extractDurationFromElement(element)
				+ extractPositionFromElement(element)
				+ "\n";
		elementsVarNames.add(element.getName());
		return s;
	}
	
	private String extractElement(Picture element) {
		String s = "";
		
		return s;
	}
	
	private String extractElement(Video element) {
		String s = "";
		
		return s;
	}
	
	private String extractElement(FadeIn element) {
		String s = "";
		
		return s;
	}
	
	private String extractElement(FadeOut element) {
		String s = "";
		
		return s;
	}
	
	private String extractElement(Translate element) {
		String s = "";
		
		return s;
	}
	
	private String extractElement(Effect element) {
		String s = "";
		if (element instanceof FadeIn)
			s += extractElement((FadeIn) element);
		else if (element instanceof FadeOut)
			s += extractElement((FadeOut) element);
		else if (element instanceof Translate)
			s += extractElement((Translate) element);
		return s;
	}
	
	private String extractElementsFromLayer(List<Element> elements) {
		String s = "";
		for (Element element : elements) {
			s += extractElementInLayer(element);
		}
 		return s;
	}

	private String extractMovieSize(Movie movie) {
		String s = varMovieHeight + " = " + movie.getDimension().getHeight() + "\n";
		s += varMovieWidth + " = " + movie.getDimension().getWidth() + "\n";
		s += "\n";
		return s;
	}
	
	private String loadImports() {
		String s = "from moviepy.editor import *\n";
		s += "\n";
		return s;
	}
}
